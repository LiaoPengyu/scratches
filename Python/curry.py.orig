<<<<<<< HEAD
def curry(f, *args, **kwargs):
    """
    f should be callable
    """
    argCount, argNames = (lambda c, l: (c.co_argcount - l, c.co_varnames[:-l])) \
                       (f.func_code, len(f.func_defaults or ()))
    def curried(*targs, **tkwargs):
        targs += args
        tkwargs.update(kwargs)
        if len(targs) + len(set(tkwargs.keys()) & set(argNames)) >= argCount:
            return f(*targs, **tkwargs)
        return curry(f, *targs, **tkwargs)
    return curried

@curry
def test(a,b,c,d=1,e=2):
    print a,b,c,d,e

test(5,b = 4, d=3, e=2)(c = 1)
test(c=1, e=2)(3, d=4)(5)
=======

def curry(f, *args, **kws):
    # 判断是否为第一次柯里化：
    argsDict = f.__dict__.get("argsDict")
    kwsDict  = f.__dict__.get("kwsDict")
    if not (argsDict or kwsDict):
        fcode, kwsVals     = f.func_code, f.func_defaults
        varNames, varCount = fcode.co_varnames, fcode.co_argcount
        if not varCount: # 无参函数直接返回
            return f
        argsNames = varNames[:argsNum - 1]  # 非关键字参数名
        argsDict = dict(zip(varNames,          # 非关键字参数，
                            len(argsNames) * [None])) # 注意:非关键字参数也可以按关键字参数方式传入
        kwsDict  = dict(zip(reversed(varNames),
                            len(kwsVals) * [None]))
        kwsDict_const = dict(zip(reversed(varNames), # 关键字参数
                                 reversed(kwsVals)))
    def curried(*cargs, **ckws):

        nargs, nkws = args+fargs, kws.copy()
        nkws.update(fkws)
        if len(nargs)+len(nkws) >= nonkws:
            return f(*nargs, **nkws)
        return curry(f, *nargs, **nkws)
    curried.__name__ = f.__name__
    return curried

@curry
def a(a,b,c = 1,d = 2):
    return a + b + c + d

print a(1)
print a(1)(2, d = 3)
print a(1,2)
print a(1,2,3)
print a(1, d = 2)(2)
>>>>>>> 58b94351e6ee9ebb78068f46d6ff9b5ce62a68a2
